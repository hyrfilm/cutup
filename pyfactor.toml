[general]
verbose = true
write_reference = true
[search]
extensions = [".js"]
ignore = [
    "venv",
    ".git", 
    "__pycache__", 
    "node_modules", 
    "coverage", 
    "skivvy_tests", 
    "migrations",
    "eslintrc"]

[openai]
code_delimiter = "***"
example_code = "***CODE***"
text_delimiter = "---"
example_text = "---TEXT---"
model = "chatgpt-4o-latest"
temperature = 0.25
reflection_request = "Are you sure that what you sent was entirely correct? If yes then answer with an empty string, otherwise just resend your response."
system_prompt = """
1. Your task is to refactor code
2. You only refactor what you are asked to refactor
3. All code needs to be placed within the delimiters: ***CODE***
4. If need to provide any additional text that should be placed within the delimiters: ---TEXT---"
5. It's important that the delimiters are respected. Do not include "example" as part of the delimiters.
"""

user_prompt = """
All TestEventLog calls use the Waterline ORM needs be wrapped so its possible to replace Waterline.
All of TestEventLog calls should be placed there.
Example a)
1. Before:
TestEventLog.getResults(testOccasionIds)

2. After:
db: {
    // additional implementatons
    testEvents: {
    async findByTestOccasion(id: number): Promise<TestEvent[]> {
        return await sails.models.testeventlog.getResult(id);
    },
};
Example b)
1. Before:
TestEventLog.find({ amendment: true })

2. After:
db: {
    // additional implementatons
    testEvents: {
      async findByTestOccasion(id: number): Promise<TestEvent[]> {
        return await sails.models.testeventlog.getResult(id);
      },
    },
};
Example c)
1. Before:
TestEventLog.findOne({ id: eventId });

2. After:
db: {
    testEvents: {
      async getById(id: number): Promise<TestEvent> {
        return await sails.models.testeventlog.findOne({ id: eventId });
      },
    },
};
Example d)
1. Before:
   const sqlQuery = `
        SELECT
          uuid
        FROM
          testeventlog
        WHERE
          "uuid" = ANY($1);`;

  const rawResult = await TestEventLog.getDatastore().sendNativeQuery(sqlQuery, [uuids]);
  return _.map(rawResult.rows, 'uuid');

2. After:
db: {
    testEvents: {
      async findByUUIDs(id: string[]): Promise<TestEvent[]> {
        const sqlQuery = `
            SELECT
              uuid
            FROM
              testeventlog
            WHERE
              "uuid" = ANY($1);

        const rawResult = await TestEventLog.getDatastore().sendNativeQuery(sqlQuery, [uuids]);
        return _.map(rawResult.rows, 'uuid');
      },
    },
};
"""
