Function: .dropWhile
### `_.dropWhile(array, [predicate=_.identity])`
Creates a slice of `array` excluding elements dropped from the beginning. Elements are dropped until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.
#### Arguments
1. `array` *(Array)*: The array to query.
2. `[predicate=_.identity]` *(Function)*: The function invoked per iteration.
#### Returns
Returns the slice of `array`.

#### Native JS alternative
You can achieve similar functionality using the `Array.prototype.filter` method:
```javascript
const dropWhile = (array, predicate) => {
  let dropIndex = 0;
  while (dropIndex < array.length && predicate(array[dropIndex], dropIndex, array)) {
    dropIndex++;
  }
  return array.slice(dropIndex);
};

const result = dropWhile([1, 2, 3, 4], n => n < 3);
console.log(result);
// output: [3, 4]
```

---

Function: .dropRightWhile
### `_.dropRightWhile(array, [predicate=_.identity])`
Creates a slice of `array` excluding elements dropped from the end. Elements are dropped until `predicate` returns falsey. The predicate is invoked with three arguments: *(value, index, array)*.

#### Arguments
1. `array` *(Array)*: The array to query.
2. `[predicate=_.identity]` *(Function)*: The function invoked per iteration.

#### Returns
Returns the slice of `array`.

#### Native JS alternative
You can achieve similar functionality using the `Array.prototype.filter` method:
```javascript
const dropRightWhile = (array, predicate) => {
  let index = array.length;
  while (index-- && predicate(array[index], index, array));
  return array.slice(0, index + 1);
};
const result = dropRightWhile([1, 2, 3, 4], n => n > 2);
console.log(result);
// output: [1, 2]
```

---

Function: .dropRight
### `_.dropRight(array, [n=1])`
Creates a slice of `array` with `n` elements dropped from the end.

#### Arguments
1. `array` *(Array)*: The array to query.
2. `[n=1]` *(number)*: The number of elements to drop.

#### Returns
Returns the slice of `array`.

#### Native JS alternative
You can achieve similar functionality using `Array.prototype.slice`:
```javascript
const dropRight = (array, n = 1) => array.slice(0, -n);
const result = dropRight([1, 2, 3, 4], 2);
console.log(result);
// output: [1, 2]
```

---

Function: .drop
### `_.drop(array, [n=1])`
Creates a slice of `array` with `n` elements dropped from the beginning.

#### Arguments
1. `array` *(Array)*: The array to query.
2. `[n=1]` *(number)*: The number of elements to drop.

#### Returns
Returns the slice of `array`.

#### Native JS alternative
While there isn't a direct native function for dropping elements from the start of an array, you can achieve similar functionality using `Array.prototype.slice`:
```javascript
const drop = (array, n = 1) => array.slice(n);
const result = drop([1, 2, 3, 4], 2);
console.log(result);
// output: [3, 4]
```

---

Function: .differenceWith
### `_.differenceWith(array, [values], [comparator])`
This method is similar to [`_.difference`](#difference) except that it accepts a `comparator` which is invoked to compare elements of `array` to `values`. The order and references of result values are determined by the first array. The comparator is invoked with two arguments: *(arrVal, othVal)*.

#### Arguments
1. `array` *(Array)*: The array to inspect.
2. `[values]` *(...Array)*: The values to exclude.
3. `[comparator]` *(Function)*: The comparator invoked per element.

#### Example
```javascript
const array = [1, 2, 3, 4];
const values = [2, 4];
const comparator = (a, b) => a === b;
const result = _.differenceWith(array, values, comparator);
console.log(result);
// output: [1, 3]
```

#### Native JS alternative
You can achieve similar functionality using `Array.prototype.filter` in combination with a custom comparison function:
```javascript
const differenceWith = (array, values, comparator) => {
  return array.filter(arrVal => !values.some(othVal => comparator(arrVal, othVal)));
};
const result = differenceWith([1, 2, 3, 4], [2, 4], (a, b) => a === b);
console.log(result);
// output: [1, 3]
```

---

Function: .differenceBy
### `_.differenceBy(array, [values], [iteratee=_.identity])`
This method is similar to [`_.difference`](#difference) except that it accepts an `iteratee` which is invoked for each element of `array` and `values` to generate the criterion by which they're compared. The order and references of result values are determined by the first array. The iteratee is invoked with one argument:

#### Native JS alternative
You can achieve similar functionality in modern JavaScript using `Array.prototype.filter` and a custom comparison function:
```javascript
const differenceBy = (array, values, iteratee) => {
  const valuesIterated = values.map(iteratee);
  return array.filter(item => !valuesIterated.includes(iteratee(item)));
};
const result = differenceBy([{ id: 1 }, { id: 2 }, { id: 3 }], [{ id: 2 }], item => item.id);
console.log(result);
// output: [{ id: 1 }, { id: 3 }]
```

---

Function: .difference
### `_.difference(array, [values])`
Creates an array of `array` values not included in the other given arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) for equality comparisons. The order and references of result values are determined by the first array.

#### Arguments
1. `array` *(Array)*: The array to inspect.
2. `[values]` *(...Array)*: The values to exclude.

#### Native JS alternative
In modern JavaScript, you can achieve similar functionality using methods such as `filter`:
```javascript
const difference = (array, values) => {
  return array.filter(x => !values.includes(x));
};
const result = difference([1, 2, 3, 4], [3, 4]);
console.log(result);
// output: [1, 2]
```

---

Function: .concat
### `_.concat(array, [values])`
Creates a new array concatenating `array` with any additional arrays and/or values.

#### Arguments
1. `array` *(Array)*: The array to concatenate.
2. `[values]` *(...*): The values to concatenate.

#### Returns
Returns a new array.

#### Native JS alternative
You can achieve similar functionality using the `Array.prototype.concat` method in modern JavaScript:
```javascript
const array = [1, 2, 3];
const newArray = array.concat(4, 5);
console.log(newArray);
// output: [1, 2, 3, 4, 5]
```

---

Function: .compact
### `_.compact(array)`
Creates an array with all falsey values removed. The values `false`, `null`, `0`, `"",` `undefined`, and `NaN` are falsey.

#### Arguments
1. `array` *(Array)*: The array to compact.

#### Returns
Returns the new array of compacted values.

#### Native JS alternative
You can achieve similar functionality using the `Array.prototype.filter` method in modern JavaScript:
```javascript
const compact = (array) => array.filter(Boolean);
const result = compact([0, 1, false, 2, '', 3]);
console.log(result);
// output: [1, 2, 3]
```

---

Function: .chunk
### `_.chunk(array, [size=1])`
Creates an array of elements split into groups the length of `size`. If `array` can't be split evenly, the final chunk will be the remaining elements.

#### Arguments
1. `array` *(Array)*: The array to process.
2. `[size=1]` *(number)*: The length of each chunk.

#### Returns
Returns the new array of chunks.

#### Native JS alternative
While modern JavaScript does not provide a built-in method for chunking arrays, you can achieve similar functionality using a simple function:
```javascript
const chunk = (input, size) => {
  return input.reduce((arr, item, idx) => {
    return idx % size === 0
      ? [...arr, [item]]
      : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];
  }, []);
};

chunk(['a', 'b', 'c', 'd'], 2);
// => [['a', 'b'], ['c', 'd']]
```